var documenterSearchIndex = {"docs":
[{"location":"api/PSlibrary/#Pseudopotentials.PSlibrary-module-1","page":"Pseudopotentials.PSlibrary module","title":"Pseudopotentials.PSlibrary module","text":"","category":"section"},{"location":"api/PSlibrary/#","page":"Pseudopotentials.PSlibrary module","title":"Pseudopotentials.PSlibrary module","text":"Pages = [\"PSlibrary.md\"]\nDepth = 3","category":"page"},{"location":"api/PSlibrary/#","page":"Pseudopotentials.PSlibrary module","title":"Pseudopotentials.PSlibrary module","text":"Modules = [Pseudopotentials.PSlibrary]","category":"page"},{"location":"api/PSlibrary/#Pseudopotentials.PSlibrary.download_potential","page":"Pseudopotentials.PSlibrary module","title":"Pseudopotentials.PSlibrary.download_potential","text":"download_potential(element::AbstractString, filedir::AbstractString = \"\")\ndownload_potential(i::Integer, filedir::AbstractString = \"\")\n\nDownload one or multiple pseudopotentials from PSlibrary for a specific element.\n\n\n\n\n\n","category":"function"},{"location":"api/PSlibrary/#Pseudopotentials.PSlibrary.list_elements-Tuple{}","page":"Pseudopotentials.PSlibrary module","title":"Pseudopotentials.PSlibrary.list_elements","text":"list_elements()\n\nList all elements that has pseudopotentials available in PSlibrary.\n\n\n\n\n\n","category":"method"},{"location":"api/PSlibrary/#Pseudopotentials.PSlibrary.list_potential","page":"Pseudopotentials.PSlibrary module","title":"Pseudopotentials.PSlibrary.list_potential","text":"list_potential(element[, db])\n\nList all pseudopotentials in PSlibrary for a specific element (abbreviation or index).\n\nArguments\n\nelement::Union{AbstractString,AbstractChar,Integer}: the element to find pseudopotentials with. The integer corresponding to the element's atomic index.\ndb::AbstractString=\"$element.jld2\": the path to the database file.\n\nSee also: save_potential\n\n\n\n\n\n","category":"function"},{"location":"api/PSlibrary/#Pseudopotentials.PSlibrary.save_potential","page":"Pseudopotentials.PSlibrary module","title":"Pseudopotentials.PSlibrary.save_potential","text":"save_potential(element, file[, db])\n\nSave a PseudopotentialFile to the element's list.\n\nArguments\n\nelement::Union{AbstractString,Integer}: the element to save pseudopotentials with. The integer corresponding to the element's atomic index.\nfile::PseudopotentialFile: the object that stores the information of that file.\ndb::AbstractString=\"$element.jld2\": the path to the database file.\n\nSee also: list_potential\n\n\n\n\n\n","category":"function"},{"location":"install/#Installation-1","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/#","page":"Installation","title":"Installation","text":"To install this package, first, you need to install a julia executable from its official website. Version v1.0.0 and above is required. This package may not work on v0.7 and below.","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"If you are using a Mac, and have Homebrew installed, open Terminal.app and type:","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"brew cask install julia","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Now I am using macOS as a standard platform to explain the following steps:","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Open Terminal.app, and type julia to start a Julia session.\nRun\njulia> using Pkg; Pkg.update()\n\njulia> Pkg.add(PackageSpec(url=\"https://github.com/MineralsCloud/Pseudopotentials.jl.git\"))\nand wait for its finish.\nRun\njulia> using Pseudopotentials\nand have fun!\nWhile using, please keep this Julia session alive. Restarting may recompile the package and cost some time.","category":"page"},{"location":"install/#Reinstall-1","page":"Installation","title":"Reinstall","text":"","category":"section"},{"location":"install/#","page":"Installation","title":"Installation","text":"In the same Julia session, run\njulia> Pkg.rm(\"Pseudopotentials\"); Pkg.gc()\nPress ctrl+d to quit the current session. Start a new Julia session and repeat the above steps.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"CurrentModule = Pseudopotentials\nDocTestSetup = :(using Pseudopotentials)","category":"page"},{"location":"#Pseudopotentials-1","page":"Home","title":"Pseudopotentials","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"#Manual-Outline-1","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\n    \"install.md\",\n]\nDepth = 1","category":"page"},{"location":"#main-index-1","page":"Home","title":"Index","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"api/api/#Pseudopotentials-module-1","page":"Pseudopotentials module","title":"Pseudopotentials module","text":"","category":"section"},{"location":"api/api/#","page":"Pseudopotentials module","title":"Pseudopotentials module","text":"Pages = [\"api.md\"]\nDepth = 3","category":"page"},{"location":"api/api/#","page":"Pseudopotentials module","title":"Pseudopotentials module","text":"Modules = [Pseudopotentials]","category":"page"},{"location":"api/api/#Pseudopotentials.AndreaDalCorso","page":"Pseudopotentials module","title":"Pseudopotentials.AndreaDalCorso","text":"AndreaDalCorso <: PseudopotentialFormat\n\nA singleton representing the Andrea Dal Corso's code (old format).\n\n\n\n\n\n","category":"type"},{"location":"api/api/#Pseudopotentials.OldNormConserving","page":"Pseudopotentials module","title":"Pseudopotentials.OldNormConserving","text":"OldNormConserving <: PseudopotentialFormat\n\nA singleton representing the old PWscf norm-conserving format.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#Pseudopotentials.UnifiedPseudopotentialFormat","page":"Pseudopotentials module","title":"Pseudopotentials.UnifiedPseudopotentialFormat","text":"UnifiedPseudopotentialFormat <: PseudopotentialFormat\n\nA singleton representing the new UPF format. If it doesn't work, the pseudopotential format is determined by the file name.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#Pseudopotentials.VanderbiltUltraSoft","page":"Pseudopotentials module","title":"Pseudopotentials.VanderbiltUltraSoft","text":"VanderbiltUltraSoft <: PseudopotentialFormat\n\nA singleton representing the Vanderbilt US pseudopotential code.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#Pseudopotentials.pseudopot_format-Tuple{AbstractString}","page":"Pseudopotentials module","title":"Pseudopotentials.pseudopot_format","text":"pseudopot_format(data::AbstractString)\n\nReturn the pseudopotential format.\n\nThe pseudopotential file is assumed to be in the new UPF format. If it doesn't work, the pseudopotential format is determined by the file name:\n\n\"*.vdb or *.van\": Vanderbilt US pseudopotential code\n\"*.RRKJ3\": Andrea Dal Corso's code (old format)\nnone of the above: old PWscf norm-conserving format\n\n\n\n\n\n","category":"method"},{"location":"api/api/#Pseudopotentials.PseudopotentialFormat","page":"Pseudopotentials module","title":"Pseudopotentials.PseudopotentialFormat","text":"PseudopotentialFormat\n\nRepresent all possible pseudopotential file formats.\n\n\n\n\n\n","category":"type"}]
}
